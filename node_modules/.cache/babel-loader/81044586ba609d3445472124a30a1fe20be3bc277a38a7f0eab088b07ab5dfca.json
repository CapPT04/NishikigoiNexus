{"ast":null,"code":"import axios from \"axios\";\nimport axiosClient from \"./axiosClient\";\nconst END_POINT = {\n  LOGIN: \"User/Login\",\n  SIGNUP: \"User/MemberRegister\"\n};\nexport const handleLoginApi = (userEmail, userPassword) => {\n  return axiosClient.post(`${END_POINT.LOGIN}`, {\n    email: userEmail,\n    password: userPassword\n  });\n};\nexport const handleSignUpApi = async user => {\n  // try {\n  //   const response = await axiosClient.post(`${END_POINT.SIGNUP}`, {\n  //     email: \"string\",\n  //     password: \"string\",\n  //     firstName: \"string\",\n  //     lastName: \"string\",\n  //     phone: \"string\",\n  //   });\n  //   // .then((response) => {\n  //   //   console.log(\"ab\");\n  //   //   console.log(JSON.stringify(response));\n  //   //   if (response) {\n  //   //     console.log(\"co data\");\n  //   //   }\n  //   // })\n  //   // .catch((error) => console.log(error.message));\n\n  //   // if (response.status === 400) {\n  //   console.log(\"Signup successful:\", response.data);\n  //   // }\n  //   return response;\n  // } catch (error) {\n  //   // console.error(\"Error during signup:\", error.response.data.message);\n  //   return error;\n  //   // Handle signup errors appropriately (e.g., display an error message to the user)\n  // }\n  return await axiosClient.post(`${END_POINT.SIGNUP}`, {\n    email: \"string\",\n    password: \"string\",\n    firstName: \"string\",\n    lastName: \"string\",\n    phone: \"string\"\n  }).catch(error => console.log(error));\n};","map":{"version":3,"names":["axios","axiosClient","END_POINT","LOGIN","SIGNUP","handleLoginApi","userEmail","userPassword","post","email","password","handleSignUpApi","user","firstName","lastName","phone","catch","error","console","log"],"sources":["D:/FU/FA24/SWP/NishikigoiNexus/src/axios/Nishikigoi.js"],"sourcesContent":["import axios from \"axios\";\r\nimport axiosClient from \"./axiosClient\";\r\nconst END_POINT = {\r\n  LOGIN: \"User/Login\",\r\n  SIGNUP: \"User/MemberRegister\",\r\n};\r\n\r\nexport const handleLoginApi = (userEmail, userPassword) => {\r\n  return axiosClient.post(`${END_POINT.LOGIN}`, {\r\n    email: userEmail,\r\n    password: userPassword,\r\n  });\r\n};\r\n\r\nexport const handleSignUpApi = async (user) => {\r\n  // try {\r\n  //   const response = await axiosClient.post(`${END_POINT.SIGNUP}`, {\r\n  //     email: \"string\",\r\n  //     password: \"string\",\r\n  //     firstName: \"string\",\r\n  //     lastName: \"string\",\r\n  //     phone: \"string\",\r\n  //   });\r\n  //   // .then((response) => {\r\n  //   //   console.log(\"ab\");\r\n  //   //   console.log(JSON.stringify(response));\r\n  //   //   if (response) {\r\n  //   //     console.log(\"co data\");\r\n  //   //   }\r\n  //   // })\r\n  //   // .catch((error) => console.log(error.message));\r\n\r\n  //   // if (response.status === 400) {\r\n  //   console.log(\"Signup successful:\", response.data);\r\n  //   // }\r\n  //   return response;\r\n  // } catch (error) {\r\n  //   // console.error(\"Error during signup:\", error.response.data.message);\r\n  //   return error;\r\n  //   // Handle signup errors appropriately (e.g., display an error message to the user)\r\n  // }\r\n  return await axiosClient\r\n    .post(`${END_POINT.SIGNUP}`, {\r\n      email: \"string\",\r\n      password: \"string\",\r\n      firstName: \"string\",\r\n      lastName: \"string\",\r\n      phone: \"string\",\r\n    })\r\n    .catch((error) => console.log(error));\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAE,YAAY;EACnBC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACC,SAAS,EAAEC,YAAY,KAAK;EACzD,OAAON,WAAW,CAACO,IAAI,CAAC,GAAGN,SAAS,CAACC,KAAK,EAAE,EAAE;IAC5CM,KAAK,EAAEH,SAAS;IAChBI,QAAQ,EAAEH;EACZ,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,eAAe,GAAG,MAAOC,IAAI,IAAK;EAC7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,MAAMX,WAAW,CACrBO,IAAI,CAAC,GAAGN,SAAS,CAACE,MAAM,EAAE,EAAE;IAC3BK,KAAK,EAAE,QAAQ;IACfC,QAAQ,EAAE,QAAQ;IAClBG,SAAS,EAAE,QAAQ;IACnBC,QAAQ,EAAE,QAAQ;IAClBC,KAAK,EAAE;EACT,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}